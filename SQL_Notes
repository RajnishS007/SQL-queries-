CTE - Common table expression 
With my_cte as (
select a, b, c
 from table )
 select a, c from my_cte;
 
 EX- 
 with cte as(
  select *, avg(amount) over (order by o.item) as "avg_amount",
  count(item) over(order by o.item) as "count",
  max(amount) over (order by o.item) as "max_amount",
  lead(amount) over (order by o.item) as "lead_amount"
  from orders as o
  inner join customers as c
  on c.customer_id = o.order_id	),
  cte1 as (
select* from orders as o
    inner join Shippings as s
    on o.order_id= s.shipping_id
  )
  select distinct cte.first_name, cte.last_name,cte.country, cte.item, cte.amount, cte1.status from cte, cte1;
  


Case statement 
Case expression statement
-- Window Function - Aggregate , Ranking, Value/Analytic
MAX(), MIN(), AVG(), SUM(), and COUNT()
syntexs - 
AVG(salary) OVER (PARTITION BY department),

Select department_name,  MAX(salary) AS max_salary from employee  group by department_name

 MAX(salary) OVER (PARTITION BY department_name) AS max_salary
 




-- Rank Function
(SELECT
    employee_name,
    department_name,
    salary,
    RANK() OVER (PARTITION BY department ORDER BY salary) position
FROM employee )

ROW_NUMBER(),
RANK(), - (e.g. 1, 2, 3, 3, 5...).   - 
and DENSE_RANK() - (e.g. 1, 2, 3, 3, 4, 5...).

LEAD(), LAG(), FIRST_VALUE(), LAST_VALUE(), NTH_VALUE()

LEAD(Value) OVER (PARTITION BY Symbol ORDER BY Timestamp) AS “% variation”
   LAG(salary) OVER (ORDER BY salary) prev_salary



-- UNBOUNDED PRECEDING
UNBOUNDED PRECEDING, n PRECEDING, CURRENT ROW, n FOLLOWING, UNBOUNDED FOLLOWING

Sub Query
Union All
Union
Self Join
Join - Left join, Inner join, Right join, Full outer join 
Time stamp Function/ time extraction function
Group By and Having Clause
Function and string function
Select statement and where clause 
CReate Table
Data Type, Primary key and foreign key 



